#!/usr/bin/env python

# Note - This tags a list of services (sections) in an INI file.  The format can be seen
#        in the aws.ini file inside this repo's base directory.  It is fairly straightforward.
# USAGE:
#
#  ./tag_aws -v <vpc-id> -d
#  
#  -d Dry run mode.
#  -v vpc-id 
#  -f tag definition file (see aws.ini for an example).

import boto3, json, sys
from boto.exception import EC2ResponseError, EC2ResponseError
import ConfigParser, getopt

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hdv:f:", ["--help","--vpc", "--file"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)

    vpc  = ""
    dry  = False
    file = ""

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-v", "--vpc"):
            vpc = a
        elif o == "-d":
            dry = True
        elif o in ("-f", "--file"):
            file = a
        else:
            assert False, "unhandled option"

    if not file:
        usage()
        sys.exit()

    config = ConfigParser.ConfigParser()
    config.readfp(open(file))

    # More infos the better.
    dry_run(dry)

    # Tag things
    tag_EC2(vpc, config, dry)
    tag_RDS(vpc, config, dry)

    sys.exit(0)

# Dry run 
def dry_run(dry):
    if dry == True:
        print "Dry run specified.  Output will reflect resources to be tagged with updates."
    else:
        return

    return True

def display_tags(config, option):

    print "Tagging instances with: "
    for tag in config.options('ec2'):
        tag_key   = tag
        tag_value = config.get('ec2', tag) 
        print tag_key + "=" + tag_value
    return True

# Tag RDS by vpc-id
def tag_RDS(vpc, config, dry=False):
    client = boto3.client('rds')
    count = 0

    response = client.describe_db_instances() 

    rds_instances = response['DBInstances']
    for rds_instance in rds_instances:
        name         = rds_instance['DBInstanceIdentifier']
        print name
        instance_vpc = rds_instance['DBSubnetGroup']['VpcId']
        instance_arn = rds_instance['DBInstanceArn']

        if vpc == instance_vpc:
            count += 1

            if dry == True:
                print "Tagging RDS instance (dry run) " + name + " with:"
                display_tags(config, 'rds')
            
            else:
                for tag in config.options('rds'):
                    tag_key   = tag
                    tag_value = config.get('rds', tag) 

                    response = client.add_tags_to_resource(
                        ResourceName=instance_arn,
                        Tags=[
                            {
                                'Key': tag_key,
                                'Value': tag_value
                            },
                        ]
                    )
    print str(count) + " RDS instances tagged."
    return True

# Tag EC2 by vpc-id
def tag_EC2(vpc, config, dry=False):
    client = boto3.client('ec2')
    count  = 0

    instances = client.describe_instances(
        Filters=[
            {
                'Name': 'vpc-id',
                'Values': [
                    vpc,
                ]
            }
        ]
    )

    display_tags(config, 'ec2')

    for entry in instances['Reservations']:
        instanceId = entry['Instances'][0]['InstanceId']

        count += 1

        for tag in config.options('ec2'):
            tag_key   = tag
            tag_value = config.get('ec2', tag) 

            try:
                response = client.create_tags(
                    DryRun=dry,
                    Resources=[
                        instanceId,
                    ],
                    Tags=[
                        {
                             'Key': tag_key,
                             'Value': tag_value
                        },
                    ]
                )
            except Exception as e:
                print "Tagging " + instanceId + " dry-run success."
                continue

    print str(count) + " EC2 instances tagged."
    return True


def usage():
    print '''
    USAGE:

      ./tag_aws <--vpc|-v>

      -v vpc-id
      -d Dry run mode - only specify if you want to perform a test run to see all the assets
         that will be tagged based on the services respective  section in the INI file.
      -f Your tag definition file (see aws.ini for an example).

    '''
    return True

if __name__ == "__main__":
    main()
