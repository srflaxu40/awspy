#!/usr/bin/env python

from boto import ec2
import sys, getopt, re



def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hk:dt:", ["help", "snaps=", "amis=", "keep=", "tag=", "region="])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    snaps = None
    imags = None
    keep  = 0
    dry_run = False
    region = None
    tag   = None

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("--snaps"):
            snaps = a 
        elif o in ("--amis"):
            imags = a
        elif o in ("-k", "--keep"):
            keep = int(a)
        elif o in ("-v", "--volume"):
            volume = a
        elif o in ("--tag"):
            tag = a
        elif o in ("--region"):
            region = a
        elif o in ("-d"):
            dry_run = True
            print "Dry run specified.  Nothing will change."
        else:
            assert False, "unhandled option"

    if len(sys.argv) < 2:
        usage()
        sys.exit()

    connection=ec2.connect_to_region(region)

    # Process snaps:
    if snaps or snaps == "":

        if tag:
            snapshots=connection.get_all_snapshots(filters={'tag:Name': tag})
            print snaps
            print snapshots
            sys.exit(0)
        else:
            snapshots=connection.get_all_snapshots(filters={'description':snaps})

        count = keep
    
        for snaps in snapshots:
            count-=1
 
            if count < 0:
                print "Deleting: " + snaps.id , "-" , snaps.start_time , "-" , snaps.volume_size , "\n"
                delete_snaps(connection, snaps.id, dry_run)

    # Process images:
    if imags or imags == "":
        count = keep

        if tag:
            images = connection.get_all_images(owners='self', filters={"tag:Name" : tag})
        else:
            images = connection.get_all_images(owners='self', filters={"description" : imags})

        for image in images:
            count-=1

            if count < 0:
                print "Deleting: " + image.id , ", along with corresponding snapshot..."
                delete_amis(connection, image.id, dry_run)

def delete_snaps(connection, snapshot, dry_run=False):

    try:
        connection.delete_snapshot(snapshot, dry_run)
    except Exception as e:
        print str(e)
    return

def delete_amis(connection, ami, dry_run=False):

    try:
        connection.deregister_image(ami, True, dry_run)
    except Exception as e:
        print str(e)

    return

def usage():
    print '''
USAGE:

--region

  "The region to connect to; ex: us-east-1"

--keep 

  "keep last 'n'"; where n is an integer

--snaps
  
  "a regex to match snaps; this looks at the DESCRIPTION of snaps"

  ./clean --snaps 'jenkins-ebs-snapshot-*' --keep 10

  [:--tag] - when tag is used with --snaps then the --snaps value can be set to an empty string.
  
    "tag name to filter by; ie remove snaps or AMIs with tag"

  ./clean --snaps="" --tag "elasticsearch-amis"

--amis

  " a regex to match amis; this looks at the DESCRIPTION of AMIs"


  ./clean --amis 'kube_slave*' --keep 10

  [:--tag]  - when tag is used with --amis then the --amis value can be set to an empty string.
  
    "tag name to filter by; ie remove snaps or AMIs with tag"

  ./clean --amis="" --tag "elasticsearch-amis"

-d

  "dry run - will not perform any deletions."

'''

if __name__ == "__main__":
    main()
